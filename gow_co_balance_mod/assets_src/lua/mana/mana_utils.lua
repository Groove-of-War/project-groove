---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Fly.
--- DateTime: 9/27/2020 4:26 PM
---
local Wargroove = require "wargroove/wargroove"
local inspect = require "inspect"
local helpers = require "helpers"

local ManaUtils = {}
ManaUtils.manaState = {}
ManaUtils.manaCountState = {}
ManaUtils.recruits = {"mage", "giant", "witch", "dragon"}

local function loadIndicator(unit)
    Wargroove.spawnUnit(unit.playerId, { x = -91, y = -47 }, "mana_indicator", true, "")
    Wargroove.waitFrame()
    local indicatorUnit = Wargroove.getUnitAt({ x = -91, y = -47 })
    indicatorUnit.pos = { x = -98, y = -98 }
    indicatorUnit.grooveCharge = 0
    table.insert(unit.loadedUnits, indicatorUnit.id)
    indicatorUnit.inTransport = true
    indicatorUnit.transportedBy = unit.id
    Wargroove.updateUnit(indicatorUnit)
    Wargroove.updateUnit(unit)
end

function ManaUtils:init()
    local allUnits = Wargroove.getUnitsAtLocation(nil)

    for i, unit in ipairs(allUnits) do
        if unit.unitClassId == "mana_crystal" then
            table.insert(ManaUtils.manaState, unit.pos)
        end
        if unit.unitClassId == "villager" then
            unit.unitClassId = "mana_crystal"
            table.insert(ManaUtils.manaState, unit.pos)
            Wargroove.updateUnit(unit)
        end
        if unit.unitClassId == "hq" and (not Wargroove.isNeutral(unit.playerId)) then
            loadIndicator(unit)
            table.insert(ManaUtils.manaCountState, unit.pos)
        end
    end

    Wargroove.spawnUnit(-1, {x = -99, y = -99}, "villager", true)
    Wargroove.waitFrame()
    local stateUnit = Wargroove.getUnitAtXY(-99, -99)
    Wargroove.setUnitState(stateUnit, "manaState", inspect(ManaUtils.manaState))
    Wargroove.setUnitState(stateUnit, "manaCountState", inspect(ManaUtils.manaCountState))
    Wargroove.updateUnit(stateUnit)
end



local function updateManaCount(count, playerId)
    local stateUnit = Wargroove.getUnitAtXY(-99, -99)
    local stateStr = Wargroove.getUnitState(stateUnit, "manaCountState")
    if stateStr ~= nil then
        ManaUtils.manaCountState = (loadstring or load)("return "..stateStr)()
    end

    for i, pos in ipairs(ManaUtils.manaCountState) do
        local hq = Wargroove.getUnitAt(pos)
        if hq ~= nil and hq.unitClassId == "hq" and hq.playerId == playerId then
            if hq.loadedUnits == nil or helpers.tableLength(hq.loadedUnits) == 0 then
                loadIndicator(hq)
            end
            local loadedUnit = Wargroove.getUnitById(hq.loadedUnits[1])
            loadedUnit.grooveCharge = count
            Wargroove.updateUnit(loadedUnit)
        end
    end
end

function ManaUtils:consumeMana(playerId)
    local stateUnit = Wargroove.getUnitAtXY(-99, -99)
    local stateStr = Wargroove.getUnitState(stateUnit, "manaState")
    if stateStr ~= nil then
        ManaUtils.manaState = (loadstring or load)("return "..stateStr)()
    end
    for i, pos in ipairs(ManaUtils.manaState) do
        local mana_crystal = Wargroove.getUnitAt(pos)
        if (not mana_crystal.hadTurn) and mana_crystal.playerId == playerId then
            mana_crystal.hadTurn = true
            Wargroove.updateUnit(mana_crystal)
            self:manaCount(playerId)
            return true
        end
    end
    return false
end

function ManaUtils:manaCount(playerId)
    local stateUnit = Wargroove.getUnitAtXY(-99, -99)
    local stateStr = Wargroove.getUnitState(stateUnit, "manaState")
    if stateStr ~= nil then
        ManaUtils.manaState = (loadstring or load)("return "..stateStr)()
    end
    local count = 0
    for i, pos in ipairs(ManaUtils.manaState) do
        local mana_crystal = Wargroove.getUnitAt(pos)
        if (not mana_crystal.hadTurn) and mana_crystal.playerId == playerId then
            count = count + 1
        end
    end
    updateManaCount(count, playerId)
    return count
end

function ManaUtils:isManaRecruitable(playerId, unitClassId)
    for i, uc in ipairs(ManaUtils.recruits) do
        if unitClassId == uc then
            return self:manaCount(playerId) > 0
        end
    end
    return true
end

function ManaUtils:isManaUnit(playerId, unitClassId)
    for i, uc in ipairs(ManaUtils.recruits) do
        if unitClassId == uc then
            return self:manaCount(playerId) > 0
        end
    end
    return false
end

return ManaUtils